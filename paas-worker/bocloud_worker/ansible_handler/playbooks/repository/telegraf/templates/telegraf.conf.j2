# Telegraf Configuration
#
# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.
#
# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.
#
# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.
#
# Environment variables can be used anywhere in this config file, simply prepend
# them with $. For strings the variable must be within quotes (ie, "$STR_VAR"),
# for numbers and booleans they should be plain (ie, $INT_VAR, $BOOL_VAR)


# Global tags can be specified here in key="value" format.
[global_tags]
{% if telegraf_tags is defined and telegraf_tags != None %}
{% for key, value in telegraf_tags.iteritems()%}
   {{ key }} = "{{ value }}"
{% endfor %}
{% endif %}

# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "{{ telegraf_agent_interval }}"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = {{ telegraf_round_interval }}

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = {{ telegraf_metric_batch_size }}

  ## For failed writes, telegraf will cache metric_buffer_limit metrics for each
  ## output, and will flush this buffer on a successful write. Oldest metrics
  ## are dropped first when this buffer fills.
  ## This buffer only fills when writes fail to output plugin(s).
  metric_buffer_limit = {{ telegraf_metric_buffer_limit }}

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "{{ telegraf_collection_jitter }}"

  ## Default flushing interval for all outputs. You shouldn't set this below
  ## interval. Maximum flush_interval will be flush_interval + flush_jitter
  flush_interval = "{{ telegraf_flush_interval }}"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "{{ telegraf_flush_jitter }}"

  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval, with the maximum being 1s.
  ##   ie, when interval = "10s", precision will be "1s"
  ##       when interval = "250ms", precision will be "1ms"
  ## Precision will NOT be used for service inputs. It is up to each individual
  ## service input to set the timestamp at the appropriate precision.
  ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
  precision = "{{ telegraf_precision }}"

  ## Logging configuration:
  ## Run telegraf with debug log messages.
  debug = {{ telegraf_debug }}
  ## Run telegraf in quiet mode (error log messages only).
  quiet = {{ telegraf_quiet }}
  ## Specify the log file name. The empty string means to log to stderr.
  logfile = "{{ telegraf_logfile }}"

  ## Override default hostname, if empty use os.Hostname()
{% if telegraf_hostname is defined and telegraf_hostname != None %}
  hostname = "{{ telegraf_hostname }}"
{% else %}
  hostname = "{{ inventory_hostname }}"
{% endif %}

  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = {{ telegraf_omit_hostname }}

###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

# Configuration for influxdb server to send metrics to
[[outputs.influxdb]]
  ## The HTTP or UDP URL for your InfluxDB instance.  Each item should be
  ## of the form:
  ##   scheme "://" host [ ":" port]
  ##
  ## Multiple urls can be specified as part of the same cluster,
  ## this means that only ONE of the urls will be written to each interval.
  # urls = ["udp://localhost:8089"] # UDP endpoint example
  urls = [ "{{ telegraf_influxdb_urls|join('","') }}" ] # required
  ## The target database for metrics (telegraf will create it if not exists).
  database = "{{ telegraf_influxdb_database }}" # required

  ## Name of existing retention policy to write to.  Empty string writes to
  ## the default retention policy.
  retention_policy = "{{ telegraf_influxdb_retention_policy }}"
  ## Write consistency (clusters only), can be: "any", "one", "quorum", "all"
  write_consistency = "{{ telegraf_influxdb_write_consistency }}"

  ## Write timeout (for the InfluxDB client), formatted as a string.
  ## If not provided, will default to 5s. 0s means no timeout (not recommended).
  timeout = "{{ telegraf_influxdb_timeout }}"
{% if telegraf_influxdb_username is defined and telegraf_influxdb_username != None %}
  username = "{{ telegraf_influxdb_username }}"
{% endif %}
{% if telegraf_influxdb_password is defined and telegraf_influxdb_password != None %}
  password = "{{ telegraf_influxdb_password }}"
{% endif %}
  ## Set the user agent for HTTP POSTs (can be useful for log differentiation)
{% if telegraf_influxdb_user_agent is defined and telegraf_influxdb_user_agent != None %}
  user_agent = "{{ telegraf_influxdb_user_agent }}"
{% endif %}
  ## Set UDP payload size, defaults to InfluxDB UDP Client default (512 bytes)
{% if telegraf_influxdb_udp_payload is defined and telegraf_influxdb_udp_payload != None %}
  udp_payload = {{ telegraf_influxdb_udp_payload }}
{% endif %}

  ## Optional SSL Config
{% if telegraf_influxdb_ssl_ca is defined and telegraf_influxdb_ssl_ca != None %}
  # ssl_ca = "{{ telegraf_influxdb_ssl_ca }}"
{% endif %}
{% if telegraf_influxdb_ssl_cert is defined and telegraf_influxdb_ssl_cert != None %}
  # ssl_cert = "{{ telegraf_influxdb_ssl_cert }}"
{% endif %}
{% if telegraf_influxdb_ssl_key is defined and telegraf_influxdb_ssl_key != None %}
  # ssl_key = "{{ telegraf_influxdb_ssl_key }}"
{% endif %}

  ## Use SSL but skip chain & host verification
{% if telegraf_influxdb_insecure_skip_verify is defined and telegraf_influxdb_insecure_skip_verify != None %}
  # insecure_skip_verify = telegraf_influxdb_insecure_skip_verify
{% endif %}

###############################################################################
#                                  PLUGINS                                    #
###############################################################################

{% for plugin in telegraf_plugins %}
[[inputs.{{ plugin.name }}]]
{% if plugin.options is defined %}
{% for key, value in plugin.options.iteritems() %}
{% if value is not mapping %}
{% if value is sequence and value is not string %}
{% if value[0] is number %}
    {{ key }} = [ {{ value|join(', ') }} ]
{% else %}
    {{ key }} = [ "{{ value|join('", "') }}" ]
{% endif %}
{% else %}
{% if value == "true" or value == "false" or value is number %}
    {{ key }} = {{ value }}
{% else %}
    {{ key }} = "{{ value }}"
{% endif %}
{% endif %}
{% endif %}
{% endfor %}
{% for key, value in plugin.options.iteritems() %}
{% if value is mapping %}
    [inputs.{{ plugin.name }}.{{ key }}]
{% for lv2_key, lv2_value in value.iteritems() %}
{% if lv2_value is sequence and lv2_value is not string %}
{% if lv2_value[0] is number %}
      {{ lv2_key }} = [ {{ lv2_value|join(', ') }} ]
{% else %}
      {{ lv2_key }} = [ "{{ lv2_value|join('", "') }}" ]
{% endif %}
{% else %}
{% if lv2_value == "true" or lv2_value == "false" or lv2_value is number %}
      {{ lv2_key }} = {{ lv2_value }}
{% else %}
      {{ lv2_key }} = "{{ lv2_value }}"
{% endif %}
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}

###############################################################################
#                              service PLUGINS                                #
###############################################################################

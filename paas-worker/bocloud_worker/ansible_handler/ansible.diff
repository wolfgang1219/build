--- ./executor/playbook_executor.py 2018-01-31 18:09:47.000000000 -0500
+++ ./executor/playbook_executor.py  2018-03-08 17:52:36.986983383 -0500
@@ -45,7 +45,7 @@
     basis for bin/ansible-playbook operation.
     '''
 
-    def __init__(self, playbooks, inventory, variable_manager, loader, options, passwords):
+    def __init__(self, playbooks, inventory, variable_manager, loader, options, passwords, callback=None):
         self._playbooks = playbooks
         self._inventory = inventory
         self._variable_manager = variable_manager
@@ -53,11 +53,13 @@
         self._options = options
         self.passwords = passwords
         self._unreachable_hosts = dict()
+        self._callback = callback
 
         if options.listhosts or options.listtasks or options.listtags or options.syntax:
             self._tqm = None
         else:
-            self._tqm = TaskQueueManager(inventory=inventory, variable_manager=variable_manager, loader=loader, options=options, passwords=self.passwords)
+            self._tqm = TaskQueueManager(inventory=inventory, variable_manager=variable_manager, loader=loader,
+                                         options=options, passwords=self.passwords, stdout_callback=self._callback)
 
         # Note: We run this here to cache whether the default ansible ssh
         # executable supports control persist.  Sometime in the future we may

--- ./cli/playbook.py 2018-01-31 18:09:47.000000000 -0500
+++ ./cli/playbook.py   2018-03-08 17:53:25.117984380 -0500
@@ -116,8 +116,8 @@
             self._flush_cache(inventory, variable_manager)
 
         # create the playbook executor, which manages running the plays via a task queue manager
-        pbex = PlaybookExecutor(playbooks=self.args, inventory=inventory, variable_manager=variable_manager, loader=loader, options=self.options,
-                                passwords=passwords)
+        pbex = PlaybookExecutor(playbooks=self.args, inventory=inventory, variable_manager=variable_manager, loader=loader,
+                                options=self.options, passwords=passwords, callback=self.callback)
 
         results = pbex.run()
